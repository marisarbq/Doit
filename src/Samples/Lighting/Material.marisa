@glsl.vert
#version 300 es

layout (location=0) in vec3 aPos;
in vec3 aNormal;

out vec3 Normal;
out vec3 FragPos;


uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;


void main()
{
    gl_Position = projection * view * model * vec4(aPos.x, aPos.y, aPos.z, 1.0);
    FragPos = vec3(model * vec4(aPos, 1.0));
    Normal = aNormal;
}

@glsl.frag
#version 300 es

#ifdef GL_ES
precision mediump float;
#endif

in vec3 Normal;
in vec3 FragPos;

out vec4 myColor;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Light light;
uniform Material material;

uniform vec3 lightColor;
uniform vec3 objectColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

void main()
{
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 lightDir = normalize(lightPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    
    //镜面光
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * material.specular * spec * lightColor;

    //漫反射
    
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * (diff * material.diffuse) * lightColor;

    //环境光
    vec3 ambient = light.ambient * material.ambient * lightColor;


    vec3 result = (ambient + diffuse + specular) * objectColor;
    myColor = vec4(result, 1.0f);
} 


@glsl.vert name=lamp
#version 300 es

layout (location=0) in vec3 aPos;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;


void main()
{
    gl_Position = projection * view * model * vec4(aPos.x, aPos.y, aPos.z, 1.0);
}

@glsl.frag name=lamp
#version 300 es

#ifdef GL_ES
precision mediump float;
#endif

out vec4 myColor;

void main()
{
    myColor = vec4(1.0);
} 


@draw

const gl = this.gl;
const program = this.program;
const vertices = [
                -0.5, -0.5, -0.5,  0.0,  0.0, -1.0,
                 0.5, -0.5, -0.5,  0.0,  0.0, -1.0, 
                 0.5,  0.5, -0.5,  0.0,  0.0, -1.0, 
                 0.5,  0.5, -0.5,  0.0,  0.0, -1.0, 
                -0.5,  0.5, -0.5,  0.0,  0.0, -1.0, 
                -0.5, -0.5, -0.5,  0.0,  0.0, -1.0, 
            
                -0.5, -0.5,  0.5,  0.0,  0.0, 1.0,
                 0.5, -0.5,  0.5,  0.0,  0.0, 1.0,
                 0.5,  0.5,  0.5,  0.0,  0.0, 1.0,
                 0.5,  0.5,  0.5,  0.0,  0.0, 1.0,
                -0.5,  0.5,  0.5,  0.0,  0.0, 1.0,
                -0.5, -0.5,  0.5,  0.0,  0.0, 1.0,
            
                -0.5,  0.5,  0.5, -1.0,  0.0,  0.0,
                -0.5,  0.5, -0.5, -1.0,  0.0,  0.0,
                -0.5, -0.5, -0.5, -1.0,  0.0,  0.0,
                -0.5, -0.5, -0.5, -1.0,  0.0,  0.0,
                -0.5, -0.5,  0.5, -1.0,  0.0,  0.0,
                -0.5,  0.5,  0.5, -1.0,  0.0,  0.0,
            
                 0.5,  0.5,  0.5,  1.0,  0.0,  0.0,
                 0.5,  0.5, -0.5,  1.0,  0.0,  0.0,
                 0.5, -0.5, -0.5,  1.0,  0.0,  0.0,
                 0.5, -0.5, -0.5,  1.0,  0.0,  0.0,
                 0.5, -0.5,  0.5,  1.0,  0.0,  0.0,
                 0.5,  0.5,  0.5,  1.0,  0.0,  0.0,
            
                -0.5, -0.5, -0.5,  0.0, -1.0,  0.0,
                 0.5, -0.5, -0.5,  0.0, -1.0,  0.0,
                 0.5, -0.5,  0.5,  0.0, -1.0,  0.0,
                 0.5, -0.5,  0.5,  0.0, -1.0,  0.0,
                -0.5, -0.5,  0.5,  0.0, -1.0,  0.0,
                -0.5, -0.5, -0.5,  0.0, -1.0,  0.0,
            
                -0.5,  0.5, -0.5,  0.0,  1.0,  0.0,
                 0.5,  0.5, -0.5,  0.0,  1.0,  0.0,
                 0.5,  0.5,  0.5,  0.0,  1.0,  0.0,
                 0.5,  0.5,  0.5,  0.0,  1.0,  0.0,
                -0.5,  0.5,  0.5,  0.0,  1.0,  0.0,
                -0.5,  0.5, -0.5,  0.0,  1.0,  0.0
        ];

let v = new Float32Array(vertices);
let VBO = this.bindVertices(v);
gl.bindBuffer(gl.ARRAY_BUFFER, VBO);

this.attr("aPos" ,3 , 6 * v.BYTES_PER_ELEMENT);
this.attr("aNormal", 3, 6 * v.BYTES_PER_ELEMENT, 3 * v.BYTES_PER_ELEMENT)

this.share.lightPos = glMatrix.vec3.fromValues(1.0, 1.2, -2.0)
gl.useProgram(program);
this.control("fps");
gl.drawArrays(gl.TRIANGLES, 0, 36);



@update
let mat4 = glMatrix.mat4, vec3 = glMatrix.vec3;
let gl = this.gl;

this.clear(0.1,0.1,0.1)


let promat = mat4.create();
let viewmat = mat4.create();

let modelvec3 = vec3.fromValues(0, 0, 0);
let modelmat = mat4.create();

mat4.perspective(promat, 3.14 / 4, 1.0, 0.1, 100.0);
mat4.translate(modelmat, modelmat, modelvec3);

if(this.controlPlugin) mat4.lookAt(viewmat, this.controlPlugin.cameraPos, vec3.add(vec3.create(), this.controlPlugin.cameraPos, this.controlPlugin.cameraFront), this.controlPlugin.cameraUp);



gl.enable(gl.DEPTH_TEST);

let shader = this._shader;
shader.use();
shader.setMat4('projection', promat);
shader.setMat4('view', viewmat);
shader.setMat4('model', modelmat);
shader.setVec3('lightColor', vec3.fromValues(1, 1, 1));
shader.setVec3('objectColor', vec3.fromValues(1, 0.5, 0.31));
shader.setVec3('lightPos', this.share.lightPos);
shader.setVec3('viewPos', this.controlPlugin.cameraPos);

shader.setVec3("material.ambient",  vec3.fromValues(1.0, 0.5, 0.31));
shader.setVec3("material.diffuse",  vec3.fromValues(1.0, 0.5, 0.31));
shader.setVec3("material.specular", vec3.fromValues(0.5, 0.5, 0.5));
shader.setFloat("material.shininess", 32.0);

shader.setVec3("light.ambient", vec3.fromValues(0.2, 0.2, 0.2));
shader.setVec3("light.diffuse", vec3.fromValues(0.5, 0.5, 0.5));
shader.setVec3("light.specular", vec3.fromValues(1.0, 1.0, 1.0));
gl.drawArrays(gl.TRIANGLES, 0, 36);

modelmat = mat4.create();
mat4.translate(modelmat, modelmat, this.share.lightPos);
mat4.scale(modelmat, modelmat, vec3.fromValues(0.3, 0.3, 0.3))

shader = this.shader["lamp"];
shader.use();
shader.setMat4('projection', promat);
shader.setMat4('view', viewmat);
shader.setMat4('model', modelmat);
gl.drawArrays(gl.TRIANGLES, 0, 36);